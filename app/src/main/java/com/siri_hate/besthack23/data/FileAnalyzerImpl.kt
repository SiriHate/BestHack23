package com.siri_hate.besthack23.data

import com.siri_hate.besthack23.domain.FileAnalyzer
import com.siri_hate.besthack23.domain.model.AnalyzedWord
import java.util.Locale

class FileAnalyzerImpl: FileAnalyzer {
    companion object {
        private const val longestWordsAmount = 10
        private val prefixes = arrayOf("в", "во", "взо", "вне", "внутри", "возо", "вы", "до", "еже", "за", "зако", "изо", "испод", "к", "кое", "ку", "меж", "междо", "между", "на", "над", "надо", "наи", "не", "недо", "ни", "низо", "о", "об", "обо", "около", "от", "ото", "па", "пере", "по", "под", "подо", "поза", "после", "пра", "пред", "преди", "предо", "про", "противо", "разо", "с", "со", "сверх", "среди", "су", "тре", "у", "без", "бес", "вз", "вс", "воз", "вос", "из", "ис", "низ", "нис", "обез", "обес", "раз", "рас", "роз", "рос", "через", "черес", "чрез", "чрес", "пре", "при").sortedByDescending { it.length }
        private val endings = arrayOf("а", "я", "о", "е", "ы", "и", "ой", "ий", "ый", "ая", "яя", "ое", "ее", "ые", "ие", "ов", "ев", "ей", "ого", "его", "ых", "их", "у", "ю", "ам", "ям", "ому", "ему", "ым", "им", "ом", "ами", "ями", "ыми", "ими", "ах", "ях", "ут", "ят", "ешь", "ете", "ишь", "ите", "ет", "ит").sortedByDescending { it.length }
        private val suffixes = arrayOf("и", "ий", "адь", "ак", "ан", "ян", "ар", "ач", "ени", "ение", "от", "ет", "есть", "ость", "ец", "изн", "ик", "ин", "их", "иц", "к", "л", "ни", "ние", "ог", "г", "ер", "ор", "ун", "ыш", "алей", "анин", "янин", "арь", "ств", "стве", "тель", "тельи", "лк", "льник", "льщик", "льщиц", "ник", "ниц", "чик", "чиц", "щик", "изм", "ист", "аж", "анк", "янк", "ариц", "арк", "ание", "ер", "ёр", "р", "еств", "атин", "льн", "н", "ор", "ер", "итель", "икн", "ш", "инат", "ал", "ел", "аст", "ат", "ев", "ов", "еват", "оват", "ен", "енн", "онн", "енск", "инск", "ив", "лив", "чив", "ит", "овит", "шн", "тельн", "уч", "юч", "яч", "чат", "а", "ать", "я", "ять", "ка", "кать", "е", "еть", "ева", "евать", "ова", "овать", "ить", "нича", "ничать", "ну", "нуть", "ствова", "ствовать", "ся", "сь", "жды", "либо", "нибудь", "о", "то", "учи", "ючи", "ск", "б", "в", "овев", "аг", "яг", "ыг", "жд", "зн", "им", "кокекец", "ьм", "ь", "ъм", "м", "еп", "ър", "ьр", "ёр", "сн", "як", "еньк", "оньк", "енк", "онк", "ц", "ашк", "ищ", "ок", "инк", "очк", "очек", "ечко", "ух", "юх", "ушк", "юшк", "ышк", "ишк", "ушек", "ышек", "ехоньк", "оханьк", "ешеньк", "ошеньк", "енько", "онько", "енечко", "онечко", "ание", "ение", "ба", "ья", "ар", "арь", "ецица", "чикщик", "чик", "щик", "чица", "щица", "исса", "эсса", "ива", "ивать", "ествова", "ествовать", "изова", "изовать", "ирова", "ировать", "изирова", "изировать", "ича", "ичать", "ану", "ануть", "оеые", "ства", "яка", "ки", "ой", "кой", "ами", "ками", "ом", "oм", "ком", "иком", "ышком", "няком", "уном", "ишом", "ым", "ы", "ажды", "ою", "ую", "остью", "мя", "ко", "ошенько", "охонько", "но", "овато", "у", "y", "ку", "еньку", "оньку", "ому", "оту", "очки", "очко", "ушки", "нюшки", "унюшки", "еньки", "ошеньки", "охоньки", "o", "дцать", "надцать", "еро", "об", "оба", "ытьб", "ытьба", "ва", "иво", "овой", "овь", "тв", "тва", "тво", "ство", "овств", "овство", "ество", "инств", "инство", "тельств", "тельство", "аг", "ага", "инг", "ург", "уг", "уга", "ыга", "д", "да", "ад", "ада", "иад", "иада", "арад", "оид", "ядь", "ажёж", "ёжь", "оз", "ай", "атай", "oв", "oвo", "адa", "ей", "ея", "ачей", "a", "иa", "иe", "стви", "ствие", "нo", "ани", "анo", "овани", "ование", "eн", "eнo", "арий", "ери", "ерие", "орий", "ти", "тие", "т", "тo", "ци", "ция", "аци", "ация", "изаци", "изация", "ици", "иция", "нци", "нция", "енци", "енция", "aн", "aнo", "енo", "тиe", "уй", "тяй", "кий", "ака", "чак", "авк", "авка", "овк", "овка", "ловк", "ловка", "анек", "ежк", "ежка", "ика", "ико", "евик", "овник", "еник", "ейник", "арник", "атник", "истик", "истика", "овщик", "айк", "айка", "ейк", "ейка", "лка", "лки", "анка", "инка", "онка", "унк", "унки", "онек", "онок", "чонок", "ушок", "ерк", "ерка", "урк", "урка", "етк", "етка", "отк", "отка", "ютк", "ютка", "ук", "чук", "чк", "чка", "ачк", "ачка", "ечк", "ечка", "ичка", "ичкаа", "очка", "шк", "шка", "шки", "ашка", "ёшк", "ёшка", "ишкао", "ушка", "ышка", "ышко", "ык", "ыка", "ульк", "улька", "онька", "юк", "юка", "няк", "ль", "ла", "лао", "ля", "аль", "ёл", "ель", "ели", "ил", "ила", "ол", "оль", "ола", "ул", "ули", "уля", "ыль", "онизм", "имый", "нь", "на", "ная", "ный", "ня", "аня", "уган", "иан", "иана", "овиан", "овиана", "лан", "ман", "овн", "овня", "ень", "ён", "ёна", "ёный", "мен", "смен", "знь", "езн", "езный", "изна", "овизн", "овизна", "ина", "ины", "иный", "иня", "бин", "бина", "овин", "овина", "лин", "лина", "елин", "жанин", "ианин", "чанин", "овчанин", "ичанин", "инчанин", "тянин", "итянин", "атина", "чин", "чина", "щин", "щина", "овщин", "овщина", "льщин", "льщина", "он", "оня", "сниснь", "сниснья", "снь", "отн", "отный", "отня", "ятн", "ятня", "уня", "иничн", "инична", "ишн", "ишний", "ышн", "ышня", "льня", "льный", "ынь", "иян", "ара", "атарь", "ep", "онер", "мейстер", "up", "вор", "вора", "тор", "атор", "итор", "ур", "ура", "тур", "тура", "aтyp", "aтypa", "итур", "итура", "ырь", "яр", "яра", "с", "са", "ис", "иса", "анс", "есс", "есса", "ус", "уся", "ариус", "ть", "aт", "ата", "атый", "иат", "чата", "чатый", "евт", "ета", "итет", "ита", "итый", "нит", "инит", "ант", "ент", "мент", "менты", "амент", "емент", "оть", "ота", "иот", "истый", "имость", "ность", "нность", "енность", "тость", "ут", "ута", "х", "ха", "ах", "аха", "ках", "иха", "ох", "оха", "ух", "уха", "ца", "цо", "цы", "еца", "ецо", "авец", "овец", "лец", "омец", "нец", "енец", "инец", "ица", "овиц", "овица", "лиц", "лица", "ница", "овниц", "овница", "ениц", "еница", "атниц", "атница", "униц", "уница", "ичниц", "ичница", "очниц", "очница", "ешниц", "ешница", "льниц", "льница", "тельниц", "тельница", "льц", "льце", "ч", "ча", "чий", "ич", "евич", "ович", "ыч", "аш", "аша", "аши", "иш", "ошь", "ош", "оша", "уш", "уша", "оныш", "ище", "ищеа", "бищ", "бище", "овищ", "овище", "лищ", "лище", "ав", "авый", "ощав", "ощавый", "ивый", "ливый", "овлив", "овливый", "елив", "еливый", "члив", "чливый", "чивый", "овый", "ляв", "лявый", "овий", "ачий", "ичий", "енек", "ский", "вск", "вский", "евск", "евский", "овск", "овский", "oвск", "oвский", "еск", "еский", "ческ", "ческий", "ическ", "ический", "истическ", "истический", "лезск", "лезский", "эзск", "эзский", "йск", "йский", "ейск", "ейский", "ийск", "ийский", "имск", "имский", "нск", "нский", "анск", "анский", "ианск", "ианский", "янск", "янский", "енский", "инский", "унск", "унский", "тельск", "тельский", "ацк", "ацкий", "ецк", "ецкий", "усеньк", "усенький", "ошенький", "онький", "охоньк", "охонький", "який", "лый", "овал", "овалый", "омый", "ний", "аный", "ебн", "ебный", "обн", "обный", "евн", "евный", "ивн", "ивный", "овный", "ений", "яжн", "яжный", "озн", "озный", "иозн", "иозный", "нин", "йн", "йный", "ейн", "ейный", "нн", "нный", "анн", "анный", "ованн", "ованный", "ированн", "ированный", "енный", "ённ", "ённый", "овенн", "овенный", "ственн", "ственный", "менн", "менный", "онный", "ионн", "ионный", "ационн", "ационный", "арн", "арный", "орн", "орный", "ичн", "ичный", "очн", "очный", "шний", "шный", "ашн", "ашний", "ашный", "альн", "альный", "идальн", "идальный", "иальн", "иальный", "ональн", "ональный", "уальн", "уальный", "ельн", "ельный", "абельн", "абельный", "ибельн", "ибельный", "тельный", "ительн", "ительный", "ильн", "ильный", "тый", "оватый", "овитый", "астый", "нич", "ничий", "учий", "ша", "ший", "айш", "айший", "ейш", "ейший", "ащ", "ащий", "ущ", "ущий", "еющ", "еющий", "ая", "ее", "ше", "ши", "вши", "вш", "вший", "ёх", "дося", "поемуому", "расся", "ав", "ени", "ис", "орий", "авец", "еник", "ист", "ос", "авиц", "енник", "ит", "от", "аг", "енств", "итель", "отн", "ад", "ент", "итет", "оть", "аж", "енци", "итор", "оч", "ай", "ень", "ификаци", "очк", "ак", "еньк", "их", "ош", "ал", "ер", "иц", "с", "альщик", "ерк", "ици", "ск", "амт", "ес", "ич", "сн", "ан", "есс", "ичн", "ств", "анец", "еств", "ичок", "стви", "анин", "есть", "иш", "тв", "анк", "етк", "ишк", "тель", "ант", "ец", "ищ", "тельств", "ар", "ечк", "к", "ти", "арий", "ёвк", "л", "ток", "арник", "ёвщик", "лец", "тор", "арь", "ёж", "лин", "тух", "ат", "ёжк", "лиц", "тяй", "атай", "ёжь", "лищ", "ул", "атин", "ёк", "лк", "ун", "атор", "ёл", "ль", "ур", "атник", "ён", "льн", "ург", "атор", "ёнок", "льник", "урк", "атур", "еныш", "льщик", "ус", "аци", "ёр", "льщиц", "ух", "ач", "ёшк", "н", "уш", "ачей", "знь", "ни", "ушек", "аш", "и", "ник", "ушк", "ашк", "иад", "ниц", "х", "б", "иан", "нк", "ц", "бищ", "ианец", "няк", "ч", "в", "ианств", "овизн", "чак", "вень", "иат", "овин", "чан", "д", "ив", "овиц", "чанин", "е", "из", "ович", "чанк", "ев", "изатор", "овищ", "чик", "евец", "изм", "овк", "чин", "евин", "изаци", "овн", "чиц", "евич", "изн", "овник", "чк", "евищ", "ий", "овств", "чонок", "евк", "ик", "овчан", "чук", "евн", "или", "овчанин", "ш", "елин", "ильн", "овщик", "шеств", "ек", "ильщик", "овь", "щик", "ей", "им", "оз", "щин", "ель", "ин", "ок", "щиц", "ельщик", "инец", "он", "ыг", "емент", "инк", "онал", "ын", "ен", "инств", "онер", "ырь", "енец", "инь", "онк", "ыш", "енёк", "ир", "оньк", "ышек", "истск", "яч", "ышк", "абельн", "ительн", "ящ", "юг", "итянск", "юл", "аическ", "ическ", "юзг", "айш", "ичн", "а", "юн", "альн", "к", "ану", "ютка", "ан", "л", "ва", "юх", "анск", "лив", "вова", "юш", "арн", "льн", "е", "ева", "юшк", "аст", "ляв", "ене", "яг", "ат", "н", "яй", "атичн", "нат", "и", "як", "ач", "нин", "ива", "ян", "ачий", "нн", "изирова", "янец", "ащ", "ов", "изова", "янин", "вн", "оват", "ирова", "янк", "вш", "овит", "ича", "янств", "е", "овн", "й", "янт", "ебн", "овск", "ка", "яр", "ев", "озн", "л", "ярус", "еват", "ок", "нича", "ят", "евит", "ональн", "ну", "ятин", "евн", "онн", "ова", "ятк", "евск", "оньк", "ствова", "ятник", "ее", "отн", "ся", "ятор", "ей", "очн", "сь", "яц", "ейш", "охоньк", "яци", "ельн", "ощав", "я", "ячк", "ем", "ск", "яшк", "ен", "ственн", "енн", "т", "а", "енск", "тельн", "айше", "ащ", "еньк", "тельск", "ами", "вш", "еск", "тн", "е", "ем", "есн", "уальн", "ее", "енн", "езн", "уч", "ему", "им", "ёк", "ущ", "ём", "нн", "ён", "ч", "ейше", "т", "ёс", "чат", "жды", "ш", "ёхоньк", "ческ", "и", "ущ", "иальн", "чив", "ку", "ющ", "ианск", "ш", "мя", "ящ", "ив", "юсеньк", "о", "ивн", "юч", "ой", "а", "ийск", "яв", "ом", "в", "ин", "як", "ому", "ши", "инск", "ян", "у", "я", "ист", "ярн", "ую", "ше", "ю", "ючи", "ями").sortedByDescending { it.length }
    }

    private fun findRoot(word: String): String {
        var root = word

        for (prefix in prefixes) {
            if (word.startsWith(prefix)) {
                root = root.substring(prefix.length)
                break
            }
        }

        for (ending in endings) {
            if (root.endsWith(ending)) {
                root = root.substring(0, root.length - ending.length)
                break
            }
        }

//        for (suffix in suffixes) {
//            if (root.endsWith(suffix)) {
//                root = root.substring(0, root.length - suffix.length)
//                break
//            }
//        }

        var suffixFound: Boolean
        do {
            suffixFound = false
            for (suffix in suffixes) {
                if (root.endsWith(suffix) && root.substring(0, root.length - suffix.length).length > 1) {
                    root = root.substring(0, root.length - suffix.length)
                    suffixFound = true
                    if (suffix.length == 1) {  // Check if the suffix length is 1
                        suffixFound = false
                    }
                    break
                }
                if (root.isEmpty()) suffixFound = false
            }
        } while (suffixFound)

        return root
    }





    override fun analyzeFileContent(fileContent: String): ArrayList<AnalyzedWord> {

        val words = fileContent.lowercase(Locale.ROOT).split("[^\\p{L}]+".toRegex())
        val topTen = ArrayList<AnalyzedWord>(10)

        for (word in words) {
            if (word.isBlank()) continue
            val root = findRoot(word)
            val existingWord = topTen.find { it.root == root }

            if (existingWord != null && existingWord.word.isNotBlank()) {
                val index = topTen.indexOf(existingWord)
                topTen[index] = existingWord.copy(entries = existingWord.entries + 1)
            } else {
                val analyzedWord = AnalyzedWord(word, word.length, 1, root)
                var inserted = false

                for (i in 0 until topTen.size) {
                    if (analyzedWord.length > topTen[i].length) {
                        topTen.add(i, analyzedWord)
                        inserted = true
                        break
                    }
                }

                if (!inserted && topTen.size < 10) {
                    topTen.add(analyzedWord)
                }

                if (topTen.size > 10) {
                    topTen.removeAt(topTen.size - 1)
                }
            }
        }

        return topTen
    }

}